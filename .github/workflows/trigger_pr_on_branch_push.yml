name: Create PR on PUSH to PRERELEASE branch

on:
  push:
    branches:
      - 'prerelease**'


jobs:
  job1:
    runs-on: ubuntu-latest
    outputs:
      ORIGINAL_BRANCH_NAME: ${{ steps.inputs.outputs.original_branch_name }}
      NEW_BRANCH_NAME: ${{ steps.inputs.outputs.new_branch_name }}
    steps:
      - name: validate inputs
        id: inputs
        run: |
          [[ "$GITHUB_REF" =~ ^refs\/heads\/pre[a-z]+__[a-zA-Z0-9\_]+__[a-zA-Z0-9\_]+$ ]] && echo "branch name matches validation" || (echo "Invalid branch name, must be `prerelease__PROJECT_NAME__ENVIRONMENT`" && exit 1)
          echo "%%^^^&&&^^^%%"
          export NEW_BRANCH_NAME=$(echo $GITHUB_REF | sed -E "s/refs\/heads\/pre([a-z]+__[a-zA-Z0-9\_]+__[a-zA-Z0-9\_]+)/\1/" )
          export ORIGINAL_BRANCH_NAME=$(echo $GITHUB_REF | sed -E "s/refs\/heads\/(pre[a-z]+__[a-zA-Z0-9\_]+__[a-zA-Z0-9\_]+)/\1/" )
          echo "new_branch_name=$NEW_BRANCH_NAME" >> "$GITHUB_OUTPUT"
          echo "original_branch_name=$ORIGINAL_BRANCH_NAME"  >> "$GITHUB_OUTPUT"

      - name: Git clone the repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      # checkout:
        # if it is the first time this runs, the target branch (NEW_BRANCH_NAME) 
        # will not exist, and then it will be created from the ORIGINAL_BRANCH_NAME. 
        # Subsequent runs will fail when "checkout -b" is used, further, we want to merge new changes
        # in those cases.
      - id: checkout
        name: create new branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORIGINAL_BRANCH_NAME: ${{ steps.inputs.outputs.original_branch_name }}
          NEW_BRANCH_NAME: ${{ steps.inputs.outputs.new_branch_name }}
        run: |
          git ls-remote
          echo "entering logic"
          # git show-ref --verify --quiet refs/heads/$NEW_BRANCH_NAME && BRANCH_EXISTS="yes" || BRANCH_EXISTS="no" && echo "Branch $NEW_BRANCH_NAME $BRANCH_EXISTS exists"
          BRANCH_EXISTS=$(git ls-remote --heads origin refs/heads/"$NEW_BRANCH_NAME" | wc -l)
          echo "Branch exitst $BRANCH_EXISTS"
          [[ "$BRANCH_EXISTS" = 0 ]] && (echo "Branch $NEW_BRANCH_NAME does not exist and will be created" && git checkout -b $NEW_BRANCH_NAME && git push -u origin $NEW_BRANCH_NAME) || echo "pass"
          [[ "$BRANCH_EXISTS" = 1 ]] && (echo "Branch $NEW_BRANCH_NAME already exists and will be merged" && git checkout $NEW_BRANCH_NAME &&  git merge origin/$ORIGINAL_BRANCH_NAME && git push -u origin $NEW_BRANCH_NAME) || echo "pass"
      - name: Check if PR exists
        id: checkpr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORIGINAL_BRANCH_NAME: ${{ steps.inputs.outputs.original_branch_name }}
          NEW_BRANCH_NAME: ${{ steps.inputs.outputs.new_branch_name }}

        run: |
          gh pr list
          echo "$GITHUB_REPOSITORY"
          echo "logic"
          
          prs=$(gh pr list \
              --repo "$GITHUB_REPOSITORY" \
              --json baseRefName,headRefName \
              --jq '
                  map(select(.baseRefName == "$NEW_BRANCH_NAME" and .headRefName == "$ORIGINAL_BRANCH_NAME"))
                  | length
              ')
          if ((prs > 0)); then
              echo "skip=true" >> "$GITHUB_OUTPUT"
          fi
          echo "$prs"
      - name: create PR
        if: '!steps.checkpr.outputs.skip'
        id: create-pr
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORIGINAL_BRANCH_NAME: ${{ steps.inputs.outputs.original_branch_name }}
          NEW_BRANCH_NAME: ${{ steps.inputs.outputs.new_branch_name }}
        run: |
          outcome=$(gh pr create --title "Create infra for ${NEW_BRANCH_NAME}" \
          --base $NEW_BRANCH_NAME --head $ORIGINAL_BRANCH_NAME \
          --body "Sample PR" \
          --reviewer dsmdavid 2>&1 1>/dev/null)
          echo $outcome